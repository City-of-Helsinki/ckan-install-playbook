---
# Modified from https://benjeffrey.com/ckan-ansible-playbook,
# which installed ckan from a package. This playbook is intented to install
# CKAN to a Ubuntu 14.04 instance, and we have to do it by installing from source.

- name: Create system user for CKAN dbs
  user: name={{ ckan_system_user }} comment="CKAN system user" system=yes

- name: Install necessities and nice-to-haves
  apt: pkg={{ item }} state=installed
  with_items:
    - acl
    - apt-transport-https
    - apticron
    - aptitude
    - build-essential
    - debian-goodies
    - fail2ban
    - git
    - htop
    - iftop
    - iotop
    - libpq5
    - nginx
    - postgresql
    - libpq-dev
    - python
    - python-pip
    - python-dev
    - python-psycopg2
    - python-pycurl
    - python-software-properties
    - python-virtualenv
    - python3-requests
    - screen
    - solr-jetty
    - sudo
    - update-notifier-common
    - wget
    - uwsgi
    - uwsgi-plugin-python
  when: ansible_pkg_mgr == 'apt'

- name: Check whether CKAN is installed
  stat: path={{ ckan_install_path }}/src/ckan
  register: p
- name: Check whether there is a virtualenv already
  stat: path={{ ckan_install_path }}/bin/activate
  register: venv

- name: Make virtualenv
  command: virtualenv --no-site-packages {{ ckan_install_path }}
  when: not venv.stat.exists

- name: Upgrade pip
  shell: ". {{ ckan_install_path }}/bin/activate && pip install --upgrade pip"

- name: Create directory for ckan config files
  file: 'path={{ ckan_conf_path }} owner={{ ckan_system_user }} state=directory'
- name: Make secondary directory to link confs into
  file: 'path=/etc/ckan/ state=directory owner={{ ckan_system_user }}'
- name: Link conf directory to /etc/ckan
  file: 'src={{ ckan_conf_path }} dest=/etc/ckan/default state=link'

- name: Make secondary directory to link installation into
  file: 'path=/usr/lib/ckan state=directory owner={{ ckan_system_user }}'
- name: Link lib directory to /usr/lib/ckan
  file: 'src={{ ckan_install_path }} dest=/usr/lib/ckan/default state=link'

- name: Install CKAN from source using PIP
  pip: chdir={{ ckan_install_path }}
       name={{ ckan_repository_address }}
       virtualenv={{ ckan_install_path }}
  when: not p.stat.exists

- name: Install requirements
# pip processing does not read the encoding header in Python files, thus
# causing a failure if there are non-ASCII characters in setup.py, workaround
# this by setting locale
  environment:
    LC_CTYPE: C.UTF-8
  pip: requirements={{ ckan_install_path }}/src/ckan/requirements.txt
       virtualenv={{ ckan_install_path }}
       state=latest
  # when: p.stat.isdir is not defined and not p.stat.isdir

# Activate and install necessary extensions
- name: Install hierarchy extension
  pip: chdir={{ ckan_install_path }}
        name=git+https://github.com/datagovuk/ckanext-hierarchy.git#egg=ckanext-hierarchy
        virtualenv={{ ckan_install_path }}
#- name: Install scheming extension
#  pip: chdir={{ ckan_install_path }}
#        name=git+https://github.com/City-of-Helsinki/ckanext-scheming.git#egg=ckanext-scheming
#        virtualenv={{ ckan_install_path }}
#- name: Install oauth2 extension
#  pip: chdir={{ ckan_install_path }}
#        name=git+https://github.com/conwetlab/ckanext-oauth2.git#egg=ckanext-oauth2
#        virtualenv={{ ckan_install_path }}

# Add our custom schema
#- name: Copy schema generator script
#  template: 'src=make_metadata.py dest="{{ ckan_install_path }}/src/ckanext-scheming/bin" owner={{ ckan_system_user }}'

#- name: Generate schema json file from google drive
  # sudo: yes
#  command: python3 make_metadata.py
#  args:
#    chdir: "{{ ckan_install_path }}/src/ckanext-scheming/bin"


- name: Replace configuration file (changes settings about internalization and adds a hierarchical organization plugin) #could also add custom schema plugin
  template: 'src=development.ini dest="{{ckan_conf_path}}/development.ini" owner={{ ckan_system_user }}'
- name: Make a link from development.ini to production.ini
  file: 'src={{ckan_conf_path}}/development.ini dest={{ckan_conf_path}}/production.ini owner={{ ckan_system_user }} state=link'

# Jetty & Solr
- name: Set Jetty to start on boot
  lineinfile: 'dest=/etc/default/jetty regexp=^NO_START line="NO_START=0"'

- name: Set Jetty host to localhost
  lineinfile: 'dest=/etc/default/jetty regexp=^JETTY_HOST line="JETTY_HOST=127.0.0.1"'

- name: Set Jetty to port 8983
  lineinfile: 'dest=/etc/default/jetty regexp=^JETTY_PORT line="JETTY_PORT=8983"'

- name: Set Jetty to use system java
  lineinfile: 'dest=/etc/default/jetty regexp=JAVA_HOME line="JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64/"'
  notify: Start Jetty

- name: Remove CKAN schema file
  file: path=/etc/solr/conf/schema.xml state=absent
  # when: ckan_installed.changed

- name: Ensure CKAN uses provided schema file
  file: path=/etc/solr/conf/schema.xml src={{ ckan_install_path }}/src/ckan/ckan/config/solr/schema.xml state=link
  notify: Restart Jetty

# Postgres
- name: Ensure CKAN database is created
  postgresql_db: 'name={{ db_name }}'
  sudo_user: postgres

- name: Ensure CKAN database user can access CKAN database
  postgresql_user: 'db={{ db_name }} name={{ db_user }} password={{ db_password }} priv=ALL'
  sudo_user: postgres

- name: Minimise CKAN database user privileges
  postgresql_user: 'name={{ db_user }} role_attr_flags=NOSUPERUSER,NOCREATEROLE,NOCREATEDB'
  sudo_user: postgres

- name: Link Repoze.who configuration file for CKAN
  file: 'path={{ ckan_conf_path }}/who.ini src={{ ckan_install_path }}/src/ckan/who.ini state=link'

# DataStore
- name: Ensure DataStore database exists
  postgresql_db: 'name=datastore_default owner={{ db_user }}'
  sudo_user: postgres

- name: Ensure CKAN database user owns DataStore database
  postgresql_user: 'db=datastore_default name={{ db_user}} password={{ db_password }} priv=ALL'
  sudo_user: postgres

- name: Ensure DataStore database user exists
  postgresql_user: 'name=datastore_default password={{ db_password }}'
  sudo_user: postgres

- name: Set DataStore database server write address
  lineinfile: 'dest={{ ckan_conf_path }}/production.ini regexp="ckan.datastore.write_url" line="ckan.datastore.write_url = postgresql://{{ db_user }}:{{ db_password }}@localhost/datastore_default"'

- name: Set DataStore database server read address
  lineinfile: 'dest={{ ckan_conf_path }}/production.ini regexp="ckan.datastore.read_url" line="ckan.datastore.read_url = postgresql://datastore_default:{{ db_password }}@localhost/datastore_default"'

- name: Set DataStore database permissions
  shell: "cd {{ ckan_install_path }}/src/ckan && . {{ ckan_install_path }}/bin/activate && paster datastore set-permissions -c {{ ckan_conf_path }}/production.ini | sudo -u postgres psql --set ON_ERROR_STOP=1"

# FileStore
- name: Ensure FileStore directory exists
  file: path={{ ckan_install_base_path}}/var owner={{ ckan_system_user }} state=directory
- name: Link filestore directory
  file: src={{ ckan_install_base_path }}/var dest=/var/lib/ckan state=link

# Configure nginx and uwsgi
- name: Add nginx config file for ckan application
  template: 'src=nginx-default dest="/etc/nginx/sites-available/default" owner=root'
- name: Add nginx config file to sites-enabled
  file: 'src="/etc/nginx/sites-available/default" dest="/etc/nginx/sites-enabled/default" owner=root state=link'
  notify: Start Nginx

- name: Add wsgi.py file in ckan conf dir
  template: 'src=wsgi.py dest="{{ ckan_conf_path }}/wsgi.py" owner={{ ckan_system_user }}'
- name: Add uwsgi conf file
  template: 'src=ckan.yml dest="/etc/uwsgi/apps-available/ckan.yml" owner=root'
- name: Enable uwsgi app
  file: 'src=/etc/uwsgi/apps-available/ckan.yml dest=/etc/uwsgi/apps-enabled/ckan.yml state=link'

- name: Ensure database is initialised
  shell: "cd {{ ckan_install_path }}/src/ckan && . {{ ckan_install_path }}/bin/activate && paster db init -c {{ ckan_conf_path }}/production.ini"
  notify:
    - Restart Nginx

# Start uwsgi
- name: Touch and set permissions to logfile
  file: 'path=/var/log/uwsgi/app/ckan.log state=touch owner={{ ckan_system_user }}'
- name: Set ownership of uwsgi pid and socket FileStore
  file: 'path=/run/uwsgi/app/ owner={{ ckan_system_user }} state=directory'
  notify: Restart uwsgi

- name: Ensure directories are writable
  file: 'path=/tmp/default/sessions owner={{ ckan_system_user }} recurse=yes state=directory'

# TODO:
# -make a sysadmin user (currently done manually using paster sysadmin)
